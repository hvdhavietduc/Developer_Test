{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\log\\\\log_reg\\\\src\\\\components\\\\login\\\\login.jsx\";\nimport React from \"react\";\nimport loginImg from \"../../BK.jpg\";\nimport { Formik } from \"formik\";\nimport * as EmailValidator from \"email-validator\"; // used when validating with a self-implemented approach\n\nimport * as Yup from \"yup\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    /*#__PURE__*/\n    _jsxDEV(Formik, {\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: (values, _ref) => {\n        let {\n          setSubmitting\n        } = _ref;\n        setTimeout(() => {\n          console.log(\"Logging in\", values);\n          setSubmitting(false);\n        }, 500);\n      },\n      children: [props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit\n        } = props;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"base-container\",\n          ref: this.props.containerRef,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: true,\n            className: \"content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: loginImg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"username\",\n                  children: \"Username\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 40,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"username\",\n                  placeholder: \"username\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 41,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"password\",\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  name: \"password\",\n                  placeholder: \"password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"footer\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }, this);\n      }, \"validate=\", values => {\n        let errors = {};\n\n        if (!values.username) {\n          errors.username = \"Required\";\n        } else if (!EmailValidator.validate(values.username)) {\n          errors.username = \"Invalid email address.\";\n        }\n\n        const passwordRegex = /(?=.*[0-9])/;\n\n        if (!values.password) {\n          errors.password = \"Required\";\n        } else if (values.password.length < 8) {\n          errors.password = \"Password must be 8 characters long.\";\n        } else if (!passwordRegex.test(values.password)) {\n          errors.password = \"Invalid password. Must contain one number.\";\n        }\n\n        return errors;\n      }]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/log/log_reg/src/components/login/login.jsx"],"names":["React","loginImg","Formik","EmailValidator","Yup","Login","Component","constructor","props","render","email","password","values","setSubmitting","setTimeout","console","log","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","containerRef","username","validate","passwordRegex","length","test"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport loginImg from \"../../BK.jpg\";\r\nimport { Formik } from \"formik\";\r\nimport * as EmailValidator from \"email-validator\"; // used when validating with a self-implemented approach\r\nimport * as Yup from \"yup\";\r\nexport class Login extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        <Formik\r\n            initialValues={{ email: \"\", password: \"\" }}\r\n            onSubmit={(values, { setSubmitting }) => {\r\n                setTimeout(() => {\r\n                    console.log(\"Logging in\", values);\r\n                    setSubmitting(false);\r\n                }, 500);\r\n            }}\r\n        >\r\n        {props => {\r\n            const {\r\n            values,\r\n            touched,\r\n            errors,\r\n            isSubmitting,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit\r\n        } = props;\r\n        return (\r\n        \r\n        <div className=\"base-container\" ref={this.props.containerRef}>\r\n                <div className=\"header\">Login</div>\r\n                <div class className=\"content\">\r\n                    <div className=\"image\">\r\n                        <img src={loginImg} />\r\n                    </div>\r\n                    <div className=\"form\">\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"username\">Username</label>\r\n                            <input type=\"text\" name=\"username\" placeholder=\"username\"></input>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input type=\"password\" name=\"password\" placeholder=\"password\"></input>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <button type=\"button\" className=\"btn\">\r\n                        Login\r\n                    </button>\r\n                </div>\r\n                    \r\n            </div>\r\n\r\n        );\r\n        }}\r\n        validate={values => {\r\n        let errors = {};\r\n        if (!values.username) {\r\n            errors.username = \"Required\";\r\n        } else if (!EmailValidator.validate(values.username)) {\r\n            errors.username = \"Invalid email address.\";\r\n        }\r\n        const passwordRegex = /(?=.*[0-9])/;\r\n        if (!values.password) {\r\n            errors.password = \"Required\";\r\n        } else if (values.password.length < 8) {\r\n            errors.password = \"Password must be 8 characters long.\";\r\n        } else if (!passwordRegex.test(values.password)) {\r\n            errors.password = \"Invalid password. Must contain one number.\";\r\n        }\r\n        return errors;\r\n        }}\r\n        </Formik>\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}